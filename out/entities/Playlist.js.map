{"version":3,"sources":["../src/entities/Playlist.ts"],"names":[],"mappings":";;;;;;;;;;AAEA;;GAEG;AACH,MAAa,QAAQ;IAwEnB,YAAa,OAAgB,EAAE,IAAI;QACjC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;QACtB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;QAEhB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;IAClB,CAAC;IAEO,KAAK,CAAE,IAAI;QACjB,IAAI,IAAI,CAAC,IAAI,KAAK,kBAAkB,EAAE;YACpC,MAAM,QAAQ,GAAG,IAAI,CAAA;YAErB,IAAI,CAAC,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAA;YACrB,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAA;YACjC,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAA;YAC/C,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAA;SAC3C;aAAM,IAAI,IAAI,CAAC,IAAI,KAAK,sBAAsB,EAAE;YAC/C,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC,UAAU,CAAA;SAC7B;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,0BAA0B,IAAI,CAAC,IAAI,EAAE,CAAC,CAAA;SACvD;QAED,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAA;QAC/B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAA;QACvC,IAAI,CAAC,WAAW,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAA;QACrD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAA;QACzC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,KAAK,kBAAkB,CAAA;IAC9C,CAAC;IAED;;OAEG;IACU,WAAW,CAAE,aAAqB,CAAC,CAAC;;YAC/C,IAAI,CAAC,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,EAAE,UAAU,CAAC,CAAA;YACtE,OAAO,IAAI,CAAC,MAAM,CAAA;QACpB,CAAC;KAAA;IAED;;;OAGG;IACU,KAAK;;YAChB,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;YACxD,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAA;QACtC,CAAC;KAAA;CACF;AApHD,4BAoHC","file":"Playlist.js","sourcesContent":["import { YouTube, Video, Thumbnail } from '..'\r\n\r\n/**\r\n * A YouTube playlist.\r\n */\r\nexport class Playlist {\r\n  /**\r\n   * The YouTube object that created this playlist.\r\n   */\r\n  public youtube: YouTube\r\n\r\n  /**\r\n   * The raw data of this playlist.\r\n   */\r\n  public data: any\r\n\r\n  /**\r\n   * Whether or not this is a full playlist object.\r\n   */\r\n  public full: boolean\r\n\r\n  /**\r\n   * The ID of this playlist.\r\n   */\r\n  public id: string\r\n\r\n  /**\r\n   * The title of the playlist.\r\n   */\r\n  public title: string\r\n\r\n  /**\r\n   * The description of the playlist.\r\n   */\r\n  public description: string\r\n\r\n  /**\r\n   * The videos in the playlist. Only available after calling `Playlist#fetchVideos()`.\r\n   */\r\n  public videos: Video[]\r\n\r\n  /**\r\n   * The ID of the creator of the playlist.\r\n   */\r\n  public creatorId: string\r\n\r\n  /**\r\n   * The date the playlist was created.\r\n   */\r\n  public dateCreated: Date\r\n\r\n  /**\r\n   * The thumbnails for the playlist.\r\n   */\r\n  public thumbnails: {\r\n    default?: Thumbnail,\r\n    high?: Thumbnail,\r\n    maxres?: Thumbnail\r\n    medium?: Thumbnail,\r\n    standard?: Thumbnail\r\n  }\r\n\r\n  /**\r\n   * The number of items in the playlist.\r\n   */\r\n  public length: number\r\n\r\n  /**\r\n   * An <iframe> tag that embeds a player that will play the playlist.\r\n   */\r\n  public embedHtml: string\r\n\r\n  /**\r\n   * The tags of the playlist.\r\n   */\r\n  public tags: string[]\r\n\r\n  constructor (youtube: YouTube, data) {\r\n    this.youtube = youtube\r\n    this.data = data\r\n\r\n    this._init(data)\r\n  }\r\n\r\n  private _init (data) {\r\n    if (data.kind === 'youtube#playlist') {\r\n      const playlist = data\r\n\r\n      this.id = playlist.id\r\n      this.tags = playlist.snippet.tags\r\n      this.length = playlist.contentDetails.itemCount\r\n      this.embedHtml = playlist.player.embedHtml\r\n    } else if (data.kind === 'youtube#searchResult') {\r\n      this.id = data.id.playlistId\r\n    } else {\r\n      throw new Error(`Invalid playlist type: ${data.kind}`)\r\n    }\r\n\r\n    this.title = data.snippet.title\r\n    this.creatorId = data.snippet.channelId\r\n    this.dateCreated = new Date(data.snippet.publishedAt)\r\n    this.thumbnails = data.snippet.thumbnails\r\n    this.full = data.kind === 'youtube#playlist'\r\n  }\r\n\r\n  /**\r\n   * Adds every video in this playlist to the `videos` property of this playlist.\r\n   */\r\n  public async fetchVideos (maxResults: number = -1) {\r\n    this.videos = await this.youtube.getPlaylistItems(this.id, maxResults)\r\n    return this.videos\r\n  }\r\n\r\n  /**\r\n   * Fetches this playlist and reassigns this object to the new playlist object.\r\n   * Only useful if `this.full` is false, or if you want updated playlist info.\r\n   */\r\n  public async fetch () {\r\n    const playlist = await this.youtube.getPlaylist(this.id)\r\n    return Object.assign(this, playlist)\r\n  }\r\n}\r\n"],"sourceRoot":"../../src"}