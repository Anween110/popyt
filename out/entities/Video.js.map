{"version":3,"sources":["../src/entities/Video.ts"],"names":[],"mappings":"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","file":"Video.js","sourcesContent":["import { YouTube } from '..'\r\nimport { Thumbnail, ISODuration } from '../types'\r\nimport { YTComment } from './Comment'\r\nimport { parseIsoDuration } from '../util'\r\n\r\n/**\r\n * A YouTube video.\r\n */\r\nexport class Video {\r\n  /**\r\n   * YouTube object that created the video.\r\n   */\r\n  public youtube: YouTube\r\n\r\n  /**\r\n   * The raw data of the video.\r\n   */\r\n  public data\r\n\r\n  /**\r\n   * Whether or not this is a full video object.\r\n   */\r\n  public full: boolean\r\n\r\n  /**\r\n   * The ID of the video.\r\n   */\r\n  public id: string\r\n\r\n  /**\r\n   * The title of the video.\r\n   */\r\n  public title: string\r\n\r\n  /**\r\n   * The description of the video.\r\n   */\r\n  public description: string\r\n\r\n  /**\r\n   * The thumbnails of the video.\r\n   */\r\n  public thumbnails: {\r\n    default?: Thumbnail,\r\n    high?: Thumbnail,\r\n    maxres?: Thumbnail\r\n    medium?: Thumbnail,\r\n    standard?: Thumbnail\r\n  }\r\n\r\n  /**\r\n   * The date the video was published.\r\n   */\r\n  public datePublished: Date\r\n\r\n  /**\r\n   * The ID of the channel that uploaded the video.\r\n   */\r\n  public channelId: string\r\n\r\n  private _length: ISODuration\r\n\r\n  /**\r\n   * The minutes of the video.\r\n   */\r\n  public minutes: number\r\n\r\n  /**\r\n   * The seconds of the video.\r\n   */\r\n  public seconds: number\r\n\r\n  /**\r\n   * The url of the video.\r\n   */\r\n  public url: string\r\n\r\n  /**\r\n   * The short url of the video, i.e. https://youtu.be/id\r\n   */\r\n  public shortUrl: string\r\n\r\n  /**\r\n   * The number of likes the video has.\r\n   */\r\n  public likes: number\r\n\r\n  /**\r\n   * The number of dislikes the video has.\r\n   */\r\n  public dislikes: number\r\n\r\n  /**\r\n   * The number of views the video has.\r\n   */\r\n  public views: number\r\n\r\n  /**\r\n   * Whether or not this video COULD BE private. True if the video might\r\n   * be private, as you cannot check if playlist items are private.\r\n   * I would recommend you try and fetch the video and catch an error\r\n   * if it is private.\r\n   */\r\n  public private: boolean\r\n\r\n  /**\r\n   * The video's comments. Only defined when Video#fetchComments is called.\r\n   */\r\n  public comments: YTComment[]\r\n\r\n  constructor (youtube: YouTube, data) {\r\n    this.youtube = youtube\r\n    this.data = data\r\n\r\n    this._init(data)\r\n  }\r\n\r\n  private _init (data) {\r\n    if (data.kind === 'youtube#video') {\r\n      const video = data\r\n\r\n      this._length = parseIsoDuration(video.contentDetails.duration)\r\n      this.minutes = (this._length.hours * 60) + this._length.minutes\r\n      this.seconds = this._length.seconds\r\n\r\n      this.likes = Number(video.statistics.likeCount)\r\n      this.dislikes = Number(video.statistics.dislikeCount)\r\n      this.views = Number(video.statistics.viewCount)\r\n      this.id = video.id\r\n    } else if (data.kind === 'youtube#playlistItem') {\r\n      this.id = data.snippet.resourceId.videoId\r\n      this.private = data.snippet.title === 'Private video'\r\n    } else if (data.kind === 'youtube#searchResult') {\r\n      this.id = data.id.videoId\r\n    } else {\r\n      throw new Error(`Invalid video type: ${data.kind}.`)\r\n    }\r\n\r\n    this.title = data.snippet.title\r\n    this.description = data.snippet.description\r\n    this.thumbnails = data.snippet.thumbnails\r\n    this.datePublished = new Date(data.snippet.publishedAt)\r\n    this.channelId = data.snippet.channelId\r\n    this.full = data.kind === 'youtube#video'\r\n    this.url = `https://youtube.com/watch?v=${this.id}`\r\n    this.shortUrl = `https://youtu.be/${this.id}`\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Fetches this video and reassigns this object to the new video object.\r\n   * Only useful if `this.full` is false, or if you want updated video info.\r\n   */\r\n  public async fetch () {\r\n    const video = await this.youtube.getVideo(this.id)\r\n    return Object.assign(this, video)\r\n  }\r\n\r\n  /**\r\n   * Fetches the video's comments and assigns them to Video#comments.\r\n   * @param maxResults The maximum amount of comments to fetch\r\n   */\r\n  public async fetchComments (maxResults: number = -1) {\r\n    this.comments = await this.youtube.getVideoComments(this.id, maxResults)\r\n    return this.comments\r\n  }\r\n}\r\n"],"sourceRoot":"../../src"}