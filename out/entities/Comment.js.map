{"version":3,"sources":["../src/entities/Comment.ts"],"names":[],"mappings":";;;;;;;;;;AAEA,MAAa,SAAS;IA8FpB,YAAa,OAAgB,EAAE,IAAI;QACjC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;QACtB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;QAEhB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;IAClB,CAAC;IAEO,KAAK,CAAE,IAAI;QACjB,IAAI,IAAI,CAAC,IAAI,KAAK,iBAAiB,EAAE;YACnC,MAAM,IAAI,KAAK,CAAC,yBAAyB,IAAI,CAAC,IAAI,EAAE,CAAC,CAAA;SACtD;QAED,MAAM,OAAO,GAAG,IAAI,CAAA;QAEpB,IAAI,CAAC,EAAE,GAAG,OAAO,CAAC,EAAE,CAAA;QACpB,IAAI,CAAC,MAAM,GAAG;YACZ,QAAQ,EAAE,OAAO,CAAC,OAAO,CAAC,iBAAiB;YAC3C,MAAM,EAAE,OAAO,CAAC,OAAO,CAAC,qBAAqB;YAC7C,SAAS,EAAE,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,KAAK;YAChD,UAAU,EAAE,OAAO,CAAC,OAAO,CAAC,gBAAgB;SAC7C,CAAA;QACD,IAAI,CAAC,IAAI,GAAG;YACV,SAAS,EAAE,OAAO,CAAC,OAAO,CAAC,WAAW;YACtC,QAAQ,EAAE,OAAO,CAAC,OAAO,CAAC,YAAY;SACvC,CAAA;QACD,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,OAAO,CAAA;QAC/B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,YAAY,KAAK,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,IAAI,GAAG,CAAA;QAChF,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,SAAS,CAAA;QAC9B,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,WAAW,CAAA;QACxC,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,SAAS,CAAA;QACnC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAA;QACrE,IAAI,CAAC,OAAO,GAAG,EAAE,CAAA;IACnB,CAAC;IAED;;;;OAIG;IACU,YAAY,CAAE,aAAqB,CAAC,CAAC;;YAChD,IAAI,CAAC,OAAO,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,EAAE,UAAU,CAAC,CAAA;YACxE,OAAO,IAAI,CAAC,OAAO,CAAA;QACrB,CAAC;KAAA;CACF;AAzID,8BAyIC","file":"Comment.js","sourcesContent":["import { YouTube } from '..'\r\n\r\nexport class YTComment {\r\n  /**\r\n   * The YouTube object used to create the comment.\r\n   */\r\n  public youtube: YouTube\r\n\r\n  /**\r\n   * The raw data from the YouTube API of the comment.\r\n   */\r\n  public data: any\r\n\r\n  /**\r\n   * The comment's unique YouTube ID.\r\n   */\r\n  public id: string\r\n\r\n  /**\r\n   * The comment's author.\r\n   */\r\n  public author: {\r\n    /**\r\n     * The author's YouTube username. May not be unique.\r\n     */\r\n    username: string,\r\n\r\n    /**\r\n     * The author's avatar URL.\r\n     */\r\n    avatar: string,\r\n\r\n    /**\r\n     * The author's channel ID.\r\n     */\r\n    channelId: string,\r\n\r\n    /**\r\n     * The author's channel URL.\r\n     */\r\n    channelUrl: string\r\n  }\r\n\r\n  /**\r\n   * The comment's content.\r\n   */\r\n  public text: {\r\n    /**\r\n     * What YouTube displays to the user viewing the comment.\r\n     */\r\n    displayed: string,\r\n    /**\r\n     * The comment's plain text.\r\n     */\r\n    original: string\r\n  }\r\n\r\n  /**\r\n   * Whether or not you can like/dislike the comment.\r\n   */\r\n  public rateable: boolean\r\n\r\n  /**\r\n   * Either YouTube thinks it's popular, or it has at least 100 likes.\r\n   */\r\n  public popular: boolean\r\n\r\n  /**\r\n   * The number of likes the comment has received.\r\n   */\r\n  public likes: number\r\n\r\n  /**\r\n   * The date the comment was published.\r\n   */\r\n  public datePublished: Date\r\n\r\n  /**\r\n   * Either the date the comment was last edited, or the date it was\r\n   * posted.\r\n   */\r\n  public dateEdited: Date\r\n\r\n  /**\r\n   * Either the ID of the video that it is commenting on, or the ID of the\r\n   * comment it is replying to.\r\n   */\r\n  public parentId: string\r\n\r\n  /**\r\n   * Replies directed to the comment. If the comment was fetched from a video,\r\n   * then this will be partially filled. You'll need to use Comment#fetchReplies\r\n   * to get all of the replies, though.\r\n   */\r\n  public replies: YTComment[]\r\n\r\n  constructor (youtube: YouTube, data) {\r\n    this.youtube = youtube\r\n    this.data = data\r\n\r\n    this._init(data)\r\n  }\r\n\r\n  private _init (data) {\r\n    if (data.kind !== 'youtube#comment') {\r\n      throw new Error(`Invalid comment type: ${data.kind}`)\r\n    }\r\n\r\n    const comment = data\r\n\r\n    this.id = comment.id\r\n    this.author = {\r\n      username: comment.snippet.authorDisplayName,\r\n      avatar: comment.snippet.authorProfileImageUrl,\r\n      channelId: comment.snippet.authorChannelId.value,\r\n      channelUrl: comment.snippet.authorChannelUrl\r\n    }\r\n    this.text = {\r\n      displayed: comment.snippet.textDisplay,\r\n      original: comment.snippet.textOriginal\r\n    }\r\n    this.rateable = comment.canRate\r\n    this.popular = comment.viewerRating === 'like' ? true : comment.likeCount >= 100\r\n    this.likes = comment.likeCount\r\n    this.datePublished = comment.publishedAt\r\n    this.dateEdited = comment.updatedAt\r\n    this.parentId = comment.parentId ? comment.parentId : comment.videoId\r\n    this.replies = []\r\n  }\r\n\r\n  /**\r\n   * Fetches replies to the comment.\r\n   * @param maxResults The maximum amount of replies to fetch. Fetches all comments if not included\r\n   * or less than 0.\r\n   */\r\n  public async fetchReplies (maxResults: number = -1) {\r\n    this.replies = await this.youtube.getCommentReplies(this.id, maxResults)\r\n    return this.replies\r\n  }\r\n}\r\n"],"sourceRoot":"../../src"}