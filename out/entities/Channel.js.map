{"version":3,"sources":["../src/entities/Channel.ts"],"names":[],"mappings":";;;;;;;;;;AAEA;;GAEG;AACH,MAAa,OAAO;IAuFlB,YAAa,OAAgB,EAAE,IAAI;QACjC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;QACtB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;QAEhB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;IAClB,CAAC;IAEO,KAAK,CAAE,IAAI;QAEjB,IAAI,IAAI,CAAC,IAAI,KAAK,iBAAiB,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;YAC3D,MAAM,OAAO,GAAG,IAAI,CAAA;YAEpB,IAAI,CAAC,EAAE,GAAG,OAAO,CAAC,EAAE,CAAA;YACpB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,OAAO,CAAA;YACtC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,OAAO,CAAC,eAAe,CAAA;YAC/C,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,SAAS,CAAC,CAAA;YACjD,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,YAAY,CAAC,CAAA;YACvD,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,qBAAqB,EAAE;gBAC7C,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,eAAe,CAAC,CAAA;aAC3D;iBAAM;gBACL,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAA;aACnB;SACF;aAAM,IAAI,IAAI,CAAC,IAAI,KAAK,sBAAsB,EAAE;YAC/C,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC,SAAS,CAAA;SAC5B;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,yBAAyB,IAAI,CAAC,IAAI,EAAE,CAAC,CAAA;SACtD;QAED,IAAI,CAAC,GAAG,GAAG,+BAA+B,IAAI,CAAC,EAAE,EAAE,CAAA;QACnD,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAA;QAC9C,IAAI,CAAC,WAAW,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAA;QACrD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAA;QAC9B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAA;QACrC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,KAAK,iBAAiB,CAAA;IAC7C,CAAC;IAED;;;OAGG;IACU,KAAK;;YAChB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;YACtD,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAA;QACrC,CAAC;KAAA;IAED;;OAEG;IACU,WAAW;;YACtB,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE;gBAC/B,MAAM,IAAI,CAAC,KAAK,EAAE,CAAA;aACnB;YAED,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAA;YAChG,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;YAEpB,OAAO,IAAI,CAAC,MAAM,CAAA;QACpB,CAAC;KAAA;CACF;AAjJD,0BAiJC","file":"Channel.js","sourcesContent":["import { YouTube, Playlist, Thumbnail } from '..'\r\n\r\n/**\r\n * A YouTube channel.\r\n */\r\nexport class Channel {\r\n  /**\r\n   * The YouTube object that created this channel object.\r\n   */\r\n  public youtube: YouTube\r\n\r\n  /**\r\n   * Whether or not this a full channel object or not.\r\n   */\r\n  public full: boolean\r\n\r\n  /**\r\n   * The raw data of this channel.\r\n   */\r\n  public data: any\r\n\r\n  /**\r\n   * The name of this channel.\r\n   */\r\n  public name: string\r\n\r\n  /**\r\n   * The description of this channel.\r\n   */\r\n  public about: string\r\n\r\n  /**\r\n   * The ID of this channel.\r\n   */\r\n  public id: string\r\n\r\n  /**\r\n   * The country this channel is based in.\r\n   */\r\n  public country: string\r\n\r\n  /**\r\n   * The url of the channel.\r\n   */\r\n  public url: string\r\n\r\n  /**\r\n   * This channel's custom URL, if they have one.\r\n   */\r\n  public customUrl: string\r\n\r\n  /**\r\n   * This channel's profile pictures.\r\n   */\r\n  public profilePictures: {\r\n    default?: Thumbnail,\r\n    high?: Thumbnail,\r\n    maxres?: Thumbnail\r\n    medium?: Thumbnail,\r\n    standard?: Thumbnail\r\n  }\r\n\r\n  /**\r\n   * The date this channel was created.\r\n   */\r\n  public dateCreated: Date\r\n\r\n  /**\r\n   * The default language for this channel's uploads.\r\n   */\r\n  public language: string\r\n\r\n  /**\r\n   * This channel's view count.\r\n   */\r\n  public views: number\r\n\r\n  /**\r\n   * The channel's uploads. Only available after calling `Channel#fetchVideos()`\r\n   */\r\n  public videos: Playlist\r\n\r\n  /**\r\n   * The number of subscribers this channel has. `-1` if the subcount is hidden.\r\n   */\r\n  public subCount: number\r\n\r\n  /**\r\n   * This channel's comment count.\r\n   */\r\n  public comments: number\r\n\r\n  constructor (youtube: YouTube, data) {\r\n    this.youtube = youtube\r\n    this.data = data\r\n\r\n    this._init(data)\r\n  }\r\n\r\n  private _init (data) {\r\n\r\n    if (data.kind === 'youtube#channel' && data.status.isLinked) {\r\n      const channel = data\r\n\r\n      this.id = channel.id\r\n      this.country = channel.snippet.country\r\n      this.language = channel.snippet.defaultLanguage\r\n      this.views = Number(channel.statistics.viewCount)\r\n      this.comments = Number(channel.statistics.commentCount)\r\n      if (!channel.statistics.hiddenSubscriberCount) {\r\n        this.subCount = Number(channel.statistics.subscriberCount)\r\n      } else {\r\n        this.subCount = -1\r\n      }\r\n    } else if (data.kind === 'youtube#searchResult') {\r\n      this.id = data.id.channelId\r\n    } else {\r\n      throw new Error(`Invalid channel type: ${data.kind}`)\r\n    }\r\n\r\n    this.url = `https://youtube.com/channel/${this.id}`\r\n    this.profilePictures = data.snippet.thumbnails\r\n    this.dateCreated = new Date(data.snippet.publishedAt)\r\n    this.name = data.snippet.title\r\n    this.about = data.snippet.description\r\n    this.full = data.kind === 'youtube#channel'\r\n  }\r\n\r\n  /**\r\n   * Fetches this channel and reassigns this object to the new channel object.\r\n   * Only useful if `this.full` is false, or if you want updated channel info.\r\n   */\r\n  public async fetch () {\r\n    const channel = await this.youtube.getChannel(this.id)\r\n    return Object.assign(this, channel)\r\n  }\r\n\r\n  /**\r\n   * Fetches the channel's videos and assigns them to the `Channel#videos` property.\r\n   */\r\n  public async fetchVideos () {\r\n    if (!(this.data.contentDetails)) {\r\n      await this.fetch()\r\n    }\r\n\r\n    const videos = await this.youtube.getPlaylist(this.data.contentDetails.relatedPlaylists.uploads)\r\n    this.videos = videos\r\n\r\n    return this.videos\r\n  }\r\n}\r\n"],"sourceRoot":"../../src"}