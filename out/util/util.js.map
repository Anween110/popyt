{"version":3,"sources":["../src/util/util.ts"],"names":[],"mappings":"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","file":"util.js","sourcesContent":["import { parse } from 'url'\r\nimport { ISODuration } from '../types'\r\n\r\nconst numbers = '\\\\d+(?:[\\\\.,]\\\\d{0,3})?'\r\nconst weekPattern = `(${numbers}W)`\r\nconst datePattern = `(${numbers}Y)?(${numbers}M)?(${numbers}D)?`\r\nconst timePattern = `T(${numbers}H)?(${numbers}M)?(${numbers}S)?`\r\nconst iso8601 = `P(?:${weekPattern}|${datePattern}(?:${timePattern})?)`\r\nconst timeArray = ['weeks', 'years', 'months', 'days', 'hours', 'minutes', 'seconds']\r\nconst pattern = new RegExp(iso8601)\r\n\r\nexport function parseUrl (url: string): { video: string, playlist: string, channel: string } {\r\n  const parsed = parse(url, true)\r\n  switch (parsed.hostname) {\r\n    case 'www.youtube.com':\r\n    case 'youtube.com':\r\n    case 'm.youtube.com': {\r\n      const idRegex = /^[a-zA-Z0-9-_]+$/\r\n\r\n      if (parsed.pathname === '/watch') {\r\n        if (!idRegex.test(parsed.query.v as string)) {\r\n          return { video: null, playlist: null, channel: null }\r\n        }\r\n\r\n        const response: { video: string, playlist: string, channel: string } = { video: parsed.query.v as string, playlist: null, channel: null }\r\n\r\n        if (parsed.query.list) {\r\n          response.playlist = parsed.query.list as string\r\n        }\r\n\r\n        return response\r\n      } else if (parsed.pathname === '/playlist') {\r\n        if (!idRegex.test(parsed.query.list as string)) {\r\n          return { video: null, playlist: null, channel: null }\r\n        }\r\n\r\n        return { playlist: parsed.query.list as string, video: null, channel: null }\r\n      } else if (parsed.pathname.startsWith('/channel/')) {\r\n        const id = parsed.pathname.replace('/channel/', '')\r\n\r\n        if (!idRegex.test(id)) {\r\n          return { video: null, playlist: null, channel: null }\r\n        }\r\n\r\n        return { channel: id, video: null, playlist: null }\r\n      }\r\n\r\n      return { video: null, playlist: null, channel: null }\r\n    }\r\n    case 'youtu.be':\r\n      return { video: /^\\/[a-zA-Z0-9-_]+$/.test(parsed.pathname) ? parsed.pathname.slice(1) : null, playlist: null, channel: null }\r\n    default:\r\n      return { video: null, playlist: null, channel: null }\r\n  }\r\n}\r\n\r\nexport function parseIsoDuration (duration: string): ISODuration {\r\n  return duration.match(pattern).slice(1).reduce((prev, current, index) => {\r\n    prev[timeArray[index]] = parseFloat(current) || 0\r\n    return prev\r\n  }, { weeks: 0, years: 0, months: 0, days: 0, hours: 0, minutes: 0, seconds: 0 })\r\n}\r\n"],"sourceRoot":"../../src"}