{"version":3,"sources":["../src/util/request.ts"],"names":[],"mappings":"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","file":"request.js","sourcesContent":["import { request as https } from 'https'\r\nimport { IncomingMessage, RequestOptions } from 'http'\r\nimport { parse as parseUrl } from 'url'\r\n\r\nexport const request = {\r\n  api: (subUrl: string, params: Object): Promise<any> => {\r\n    const url = 'https://www.googleapis.com/youtube/v3' + (subUrl.startsWith('/') ? subUrl : '/' + subUrl) + parseParams(params)\r\n    return get(url)\r\n  }\r\n}\r\n\r\nfunction get (url: string): Promise<any> {\r\n  const options = parseUrlToOptions(url, 'GET')\r\n\r\n  return req(options, req => {\r\n    req.on('error', error => {\r\n      throw error\r\n    })\r\n\r\n    req.end()\r\n  })\r\n}\r\n\r\nfunction post (url: string, data: any): Promise<any> {\r\n  const options = parseUrlToOptions(url, 'POST')\r\n\r\n  return req(options, req => {\r\n    req.on('error', error => {\r\n      throw error\r\n    })\r\n\r\n    req.write(data)\r\n    req.end()\r\n  })\r\n}\r\n\r\nfunction put (url: string, data: any): Promise<any> {\r\n  const options = parseUrlToOptions(url, 'PUT')\r\n\r\n  return req(options, req => {\r\n    req.on('error', error => {\r\n      throw error\r\n    })\r\n\r\n    req.write(data)\r\n    req.end()\r\n  })\r\n}\r\n\r\nfunction parseUrlToOptions (url: string, type: 'POST' | 'PUT' | 'GET'): RequestOptions {\r\n  const parsed = parseUrl(url)\r\n\r\n  return {\r\n    hostname: parsed.hostname,\r\n    port: parsed.port ? parsed.port : 443,\r\n    path: parsed.path,\r\n    method: type,\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  }\r\n}\r\n\r\nfunction req (options: RequestOptions, reqFunction: Function) {\r\n  return new Promise((resolve, reject) => {\r\n    const cb = (res: IncomingMessage) => {\r\n      let data = ''\r\n\r\n      res.setEncoding('utf8')\r\n\r\n      res.on('data', chunk => {\r\n        data += chunk\r\n      })\r\n\r\n      res.on('end', () => {\r\n        const parsed = JSON.parse(data)\r\n\r\n        if (parsed.error) {\r\n          return reject(new Error(parsed.error.message))\r\n        }\r\n\r\n        resolve(parsed)\r\n      })\r\n\r\n      res.on('error', error => {\r\n        reject(error)\r\n      })\r\n    }\r\n\r\n    reqFunction(https(options, cb))\r\n  })\r\n}\r\n\r\nfunction parseParams (params: Object) {\r\n  let url = ''\r\n\r\n  for (let param in params) {\r\n    url += (!url.includes('?') ? '?' : '&') + param + '=' + params[param]\r\n  }\r\n\r\n  return url\r\n}\r\n"],"sourceRoot":"../../src"}