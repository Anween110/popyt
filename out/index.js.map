{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import { Video, Channel, Playlist, YTComment } from './entities'\r\nimport { parseUrl, request } from './util'\r\nexport * from './entities'\r\nexport * from './types'\r\n\r\n/**\r\n * The main class used to interact with the YouTube API. Use this.\r\n */\r\nexport class YouTube {\r\n  public token: string\r\n\r\n  /**\r\n   *\r\n   * @param token Your YouTube Data API v3 token. Don't share this with anybody.\r\n   */\r\n  constructor (token: string) {\r\n    this.token = token\r\n  }\r\n\r\n  /**\r\n   * Search videos on YouTube.\r\n   * @param searchTerm What to search for on YouTube.\r\n   * @param maxResults The maximum amount of results to find. Defaults to 10.\r\n   */\r\n  public searchVideos (searchTerm: string, maxResults: number = 10) {\r\n    return this.search('video', searchTerm, maxResults) as Promise<Video[]>\r\n  }\r\n\r\n  /**\r\n   * Search channels on YouTube.\r\n   * @param searchTerm What to search for on YouTube.\r\n   * @param maxResults The maximum amount of results to find. Defaults to 10.\r\n   */\r\n  public searchChannels (searchTerm: string, maxResults: number = 10) {\r\n    return this.search('channel', searchTerm, maxResults) as Promise<Channel[]>\r\n  }\r\n\r\n  /**\r\n   * Search playlists on YouTube.\r\n   * @param searchTerm What to search for on YouTube.\r\n   * @param maxResults The maximum amount of results to find. Defaults to 10.\r\n   */\r\n  public searchPlaylists (searchTerm: string, maxResults: number = 10) {\r\n    return this.search('playlist', searchTerm, maxResults) as Promise<Playlist[]>\r\n  }\r\n\r\n  /**\r\n   * Get a video object from the ID of a video.\r\n   * @param id The ID of the video.\r\n   */\r\n  public getVideo (id: string) {\r\n    return this.getItemById('video', id) as Promise<Video>\r\n  }\r\n\r\n  /**\r\n   * Get a channel object from the ID of a channel.\r\n   * @param id The ID of the channel.\r\n   */\r\n  public getChannel (id: string) {\r\n    return this.getItemById('channel', id) as Promise<Channel>\r\n  }\r\n\r\n  /**\r\n   * Get a playlist object from the ID of a playlist.\r\n   * @param id The ID of the playlist.\r\n   */\r\n  public getPlaylist (id: string) {\r\n    return this.getItemById('playlist', id) as Promise<Playlist>\r\n  }\r\n\r\n  /**\r\n   * Get a comment object from the ID of a comment.\r\n   * @param id The ID of the comment.\r\n   */\r\n  public getComment (id: string) {\r\n    return this.getItemById('comment', id) as Promise<YTComment>\r\n  }\r\n\r\n  /**\r\n   * Get a video object from the url of a video.\r\n   * @param url The url of the video.\r\n   */\r\n  public getVideoByUrl (url: string) {\r\n    const id = parseUrl(url)\r\n\r\n    if (!id.video) {\r\n      return Promise.reject('Not a valid video url')\r\n    }\r\n\r\n    return this.getItemById('video', id.video) as Promise<Video>\r\n  }\r\n\r\n  /**\r\n   * Get a channel object from the url of a channel.\r\n   * @param url The url of the channel.\r\n   */\r\n  public getChannelByUrl (url: string) {\r\n    const id = parseUrl(url)\r\n\r\n    if (!id.channel) {\r\n      return Promise.reject('Not a valid channel url')\r\n    }\r\n\r\n    return this.getItemById('channel', id.channel) as Promise<Channel>\r\n  }\r\n\r\n  /**\r\n   * Get a playlist object from the url of a playlist.\r\n   * @param url The url of the playlist.\r\n   */\r\n  public getPlaylistByUrl (url: string) {\r\n    const id = parseUrl(url)\r\n\r\n    if (!id.playlist) {\r\n      return Promise.reject('Not a valid playlist url')\r\n    }\r\n\r\n    return this.getItemById('playlist', id.playlist) as Promise<Playlist>\r\n  }\r\n\r\n  /**\r\n   * Get `maxResults` videos in a playlist. Used mostly internally with `Playlist#fetchVideos`.\r\n   * @param playlistId The ID of the playlist.\r\n   * @param maxResults The maximum amount of videos to get from the playlist. If <= 0 or not included, returns all videos in the playlist.\r\n   */\r\n  public getPlaylistItems (playlistId: string, maxResults: number = -1) {\r\n    return this.getPaginatedItems('playlistItems', playlistId, maxResults) as Promise<Video[]>\r\n  }\r\n\r\n  /**\r\n   * Get `maxResults` comments on a video. Used mostly internally with `Video#fetchComments`.\r\n   * Can only get the last 100 comments on a video, due to a bug with the YouTube API.\r\n   * @param videoId The ID of the video.\r\n   * @param maxResults The maximum amount of comments to get from the video. If <= 0 or not included, returns all comments on the video.\r\n   */\r\n  public getVideoComments (videoId: string, maxResults: number = -1) {\r\n    return this.getPaginatedItems('commentThreads', videoId, maxResults) as Promise<YTComment[]>\r\n  }\r\n\r\n  /**\r\n   * Get `maxResults` replies to a comment. Used mostly internally with `Comment#fetchReplies`.\r\n   * @param commentId The ID of the comment to get replies from.\r\n   * @param maxResults The maximum amount of replies to get. Gets all replies if <= 0 or not included.\r\n   */\r\n  public getCommentReplies (commentId: string, maxResults: number = -1) {\r\n    return this.getPaginatedItems('comments', commentId, maxResults) as Promise<YTComment[]>\r\n  }\r\n\r\n  private async search (type: 'video' | 'channel' | 'playlist', searchTerm: string, maxResults: number = 10): Promise<Video[] | Channel[] | Playlist[]> {\r\n    if (maxResults < 1 || maxResults > 50) {\r\n      return Promise.reject('Max results must be greater than 0 and less than or equal to 50')\r\n    }\r\n\r\n    const results = await request.api('search', {\r\n      q: encodeURIComponent(searchTerm),\r\n      maxResults,\r\n      key: this.token,\r\n      part: 'snippet',\r\n      type\r\n    })\r\n\r\n    const items = []\r\n\r\n    results.items.forEach(item => {\r\n      switch (type) {\r\n        case 'video':\r\n          items.push(new Video(this, item))\r\n          break\r\n        case 'channel':\r\n          items.push(new Channel(this, item))\r\n          break\r\n        case 'playlist':\r\n          items.push(new Playlist(this, item))\r\n          break\r\n        default:\r\n          throw new Error('Type must be a video, channel, or playlist')\r\n      }\r\n    })\r\n\r\n    return items\r\n  }\r\n\r\n  private async getItemById (type: 'video' | 'channel' | 'playlist' | 'comment', id: string): Promise<Video | Channel | Playlist | YTComment> {\r\n    let result\r\n\r\n    if (type === 'video') {\r\n      result = await request.api('videos', {\r\n        id,\r\n        part: 'snippet,contentDetails,statistics,status',\r\n        key: this.token\r\n      })\r\n    } else if (type === 'channel') {\r\n      result = await request.api('channels', {\r\n        id,\r\n        part: 'snippet,contentDetails,statistics,status',\r\n        key: this.token\r\n      })\r\n    } else if (type === 'playlist') {\r\n      result = await request.api('playlists', {\r\n        id,\r\n        part: 'snippet,contentDetails,player',\r\n        key: this.token\r\n      })\r\n    } else if (type === 'comment') {\r\n      result = await request.api('comments', {\r\n        id,\r\n        part: 'snippet',\r\n        key: this.token\r\n      })\r\n    }\r\n\r\n    if (result.items.length === 0) {\r\n      return Promise.reject('Item not found')\r\n    }\r\n\r\n    switch (type) {\r\n      case 'video':\r\n        return new Video(this, result.items[0])\r\n      case 'playlist':\r\n        return new Playlist(this, result.items[0])\r\n      case 'channel':\r\n        return new Channel(this, result.items[0])\r\n      case 'comment':\r\n        return new YTComment(this, result.items[0])\r\n      default:\r\n        throw new Error('Type must be a video, channel, or playlist')\r\n    }\r\n  }\r\n\r\n  private async getPaginatedItems (type: 'playlistItems' | 'commentThreads' | 'comments', id: string, maxResults: number = -1): Promise<Video[] | YTComment[]> {\r\n    let full: boolean\r\n    let items = []\r\n\r\n    if (maxResults <= 0) {\r\n      full = true\r\n    } else {\r\n      full = false\r\n    }\r\n\r\n    let max: number\r\n\r\n    if (type === 'playlistItems') {\r\n      max = 50\r\n    } else if (type === 'commentThreads' || type === 'comments') {\r\n      max = 100\r\n    } else {\r\n      return Promise.reject('Unknown item type ' + type)\r\n    }\r\n\r\n    if (maxResults > max) {\r\n      return Promise.reject(`Max results must be ${max} or below`)\r\n    }\r\n\r\n    const options: {\r\n      part: string,\r\n      key: string,\r\n      maxResults: number,\r\n      videoId?: string,\r\n      parentId?: string,\r\n      textFormat?: string,\r\n      playlistId?: string,\r\n      pageToken?: string\r\n    } = {\r\n      part: 'snippet',\r\n      key: this.token,\r\n      maxResults: full ? max : maxResults\r\n    }\r\n\r\n    switch (type) {\r\n      case 'playlistItems':\r\n        options.playlistId = id\r\n        break\r\n      case 'commentThreads':\r\n        options.videoId = id\r\n        options.part += ',replies'\r\n        options.textFormat = 'plainText'\r\n        break\r\n      case 'comments':\r\n        options.parentId = id\r\n        break\r\n    }\r\n\r\n    const results = await request.api(type, options).catch(error => {\r\n      return Promise.reject('Items not found')\r\n    })\r\n\r\n    if (results.items.length === 0) {\r\n      return Promise.reject('Items not found')\r\n    }\r\n\r\n    const totalResults = results.pageInfo.totalResults\r\n    const perPage = results.pageInfo.resultsPerPage\r\n    const pages = Math.floor(totalResults / perPage)\r\n\r\n    results.items.forEach(item => {\r\n      let comment: YTComment\r\n\r\n      switch (type) {\r\n        case 'playlistItems':\r\n          items.push(new Video(this, item))\r\n          break\r\n        case 'commentThreads':\r\n          comment = new YTComment(this, item.snippet.topLevelComment)\r\n          items.push(comment)\r\n          break\r\n        case 'comments':\r\n          items.push(new YTComment(this, item))\r\n          break\r\n      }\r\n\r\n      if (item.replies) {\r\n        item.replies.comments.forEach(reply => {\r\n          const created = new YTComment(this, reply)\r\n          comment.replies.push(created)\r\n        })\r\n      }\r\n    })\r\n\r\n    if (!full || pages === 0) {\r\n      return items\r\n    }\r\n\r\n    let oldRes = results\r\n    options.pageToken = oldRes.nextPageToken\r\n\r\n    for (let i = 1; i < pages; i++) {\r\n      const newResults = await request.api(type, options)\r\n\r\n      oldRes = newResults\r\n      newResults.items.forEach(item => {\r\n        let comment: YTComment\r\n\r\n        switch (type) {\r\n          case 'playlistItems':\r\n            items.push(new Video(this, item))\r\n            break\r\n          case 'commentThreads':\r\n            comment = new YTComment(this, item.snippet.topLevelComment)\r\n            items.push(comment)\r\n            break\r\n          case 'comments':\r\n            items.push(new YTComment(this, item))\r\n            break\r\n        }\r\n\r\n        if (item.replies) {\r\n          item.replies.comments.forEach(reply => {\r\n            const created = new YTComment(this, reply)\r\n            comment.replies.push(created)\r\n          })\r\n        }\r\n      })\r\n    }\r\n\r\n    return items\r\n  }\r\n}\r\n"],"sourceRoot":"../src"}